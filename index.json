[{"uri":"https://liuchengxu.github.io/space-vim-doc/basics/","title":"Basics","tags":[],"description":"","content":"Basics How to install and customize space-vim.\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/tutorial/space-vim/buffer/","title":"Buffer","tags":[],"description":"","content":"   Key Binding Mode Description     SPC b 1 Normal switch to buffer with number 1   SPC b 2 Normal switch to buffer with number 2   SPC b 3 Normal switch to buffer with number 3   SPC b 4 Normal switch to buffer with number 4   SPC b 5 Normal switch to buffer with number 5   SPC b 6 Normal switch to buffer with number 6   SPC b 7 Normal switch to buffer with number 7   SPC b 8 Normal switch to buffer with number 8   SPC b 9 Normal switch to buffer with number 9   SPC b p Normal switch to previous buffer   SPC b n Normal switch to next buffer   \u0026lt;Tab\u0026gt; Normal swtich to next buffer, equal to SPC b n   \u0026lt;Shift-Tab\u0026gt; Normal switch to previous buffer, equal to SPC b p   SPC b d Normal delete current buffer   SPC b k Normal kill current buffer    Check the details of a certain key binding, e.g., :verbose nmap \u0026lt;Leader\u0026gt;bp:\n:verbose nmap \u0026lt;Leader\u0026gt;bp n \u0026lt;Space\u0026gt;bp * :bprevious\u0026lt;CR\u0026gt; Last set from ~/.vim/plugged/vim-better-default/plugin/default.vim Show all buffers via :files, :buffers or :ls, see :h :buffers.\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/basics/requirements/","title":"Requirements","tags":[],"description":"","content":"Make sure you have installed:\n  Git\n  Vim or Neovim\n  The most recent Vim(Neovim) version is recommended.\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/","title":"space-vim","tags":[],"description":"","content":"space-vim space-vim is a vim distribution for vim plugins and resources, compatible with Vim and Neovim.\nIt is inspired by spacemacs and mimics spacemacs in a high level, especially in the whole architecture, key bindings and GUI. if have ever tried spacemacs, you will find space-vim is very similar to it in user experience.\nThe distribution is completely customizable using .spacevim, which is equivalent to .spacemacs in spacemacs.\nFeatures Beautiful interface I have written a vim colorscheme space-vim-dark based on spacemacs-dark theme. You could also try spacemacs-theme.vim.\nMnemonic key bindings commands have mnemonic prefixes like SPC b for all the buffer commands.\nMeanwhile, the whole key bindings have been well adapted for vim for the lack of great plugins similar to which-key in emacs. Most key bindings are limited to no more than two keystrokes without counting or in, e.g. SPC x d to delete trailing whitespaces.\nFor different language layers, , , as default in space-vim, can be seen as the major-mode prefix in spacemacs.\nLean and mean No nonsense wrappers, free from being bloated.\nFor whom?  the novice vim users the vimmers who pursuit a beautiful appearance the users using both vim and spacemacs  If you have been a vimmer for quite a while, just pick out the part you are interested in. space-vim is well-organized due to the layers concept, you can easily find what you want. Since some guys are interested in the statusline part of space-vim, this section has been extracted as eleline.vim.\nContribute to this documentation Feel free to update this content, just click the Edit this page link displayed on top right of each page, and pullrequest it\nYour modification will be deployed automatically when merged.\n "},{"uri":"https://liuchengxu.github.io/space-vim-doc/tutorial/","title":"Tutorial","tags":[],"description":"","content":"Tutorial How to use space-vim as well as some other general Vim knowledge\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/basics/installation/","title":"Installation","tags":[],"description":"","content":"Linux and macOS one-line installer $ bash \u0026lt;(curl -fsSL https://raw.githubusercontent.com/liuchengxu/space-vim/master/install.sh) Makefile $ git clone https://github.com/liuchengxu/space-vim.git ~/.space-vim $ cd ~/.space-vim $ make vim # install space-vim for Vim $ make neovim # install space-vim for NeoVim Windows The easist way is to download install.cmd and run it as administrator.\nManual Given git and Vim/NeoVim have been installed already:\n Clone space-vim  $ git clone https://github.com/liuchengxu/space-vim.git ~/.space-vim  Install vim-plug, refer to vim-plug installation section for more information.\n  Create the symlinks.\nLinux and macOS\n# For Vim $ ln -s ~/.space-vim/init.vim ~/.vimrc # For NeoVim $ ln -s ~/.space-vim/init.vim ~/.config/nvim/init.vim # Both for Vim and NeoVim $ cp ~/.space-vim/init.spacevim ~/.spacevim   Open vim, then space-vim will automatically install the missing plugins. If auto-installation fails unexpectly, please try running :PlugInstall manually.\n  "},{"uri":"https://liuchengxu.github.io/space-vim-doc/basics/configuration/","title":"Configuration","tags":[],"description":"","content":"You can use .spacevim in your home directory to customize space-vim, where you can enable the existing layers, add your extra plugins and private configurations.\nIf .spacevim does not exist, vanilla vim will be loaded! Refer to init.spacevim as an example.\nPresetting \u0026#34; Let Vim and NeoVim shares the same plugin directorylet g:spacevim_plug_home = \u0026#39;~/.vim/plugged\u0026#39;\u0026#34; Change the background color of theme space-vim-dark (default 235)let g:space_vim_dark_background = 234Layers() Please refer to LAYERS to take a look at the whole shipped layers.\n\u0026#34; Enable the existing layers in space-vimfunction! Layers()\u0026#34; Default layers Layer \u0026#39;fzf\u0026#39; Layer \u0026#39;unite\u0026#39; Layer \u0026#39;better-defaults\u0026#39;endfunctionUserInit() \u0026#34; Add your own pluginsfunction! UserInit()\u0026#34; The default leader key is space key.\u0026#34; Uncomment the line below and modify \u0026#34;\u0026lt;\\Space\u0026gt;\u0026#34; if you prefer another\u0026#34; let g:spacevim_leader = \u0026#34;\u0026lt;\\Space\u0026gt;\u0026#34;\u0026#34; The default local leader key is comma.\u0026#34; Uncomment the line below and modify \u0026#39;,\u0026#39; if you prefer another\u0026#34; let g:spacevim_localleader = \u0026#39;,\u0026#39;\u0026#34; Install personal plugins\u0026#34; Plug \u0026#39;hecal3/vim-leader-guide\u0026#39;endfunctionUserConfig() \u0026#34; Override the default settings as well as adding extrasfunction! UserConfig()\u0026#34; If you have installed the powerline fonts and want to enable airline layer\u0026#34; let g:airline_powerline_fonts=1\u0026#34; Use gui colors in terminal if available if has(\u0026#39;termguicolors\u0026#39;) set termguicolors if g:spacevim_tmux\u0026#34; If use vim inside tmux, see https://github.com/vim/vim/issues/993\u0026#34; set Vim-specific sequences for RGB colors let \u0026amp;t_8f = \u0026#34;\\\u0026lt;Esc\u0026gt;[38;2;%lu;%lu;%lum\u0026#34; let \u0026amp;t_8b = \u0026#34;\\\u0026lt;Esc\u0026gt;[48;2;%lu;%lu;%lum\u0026#34; endif endifendfunction"},{"uri":"https://liuchengxu.github.io/space-vim-doc/tutorial/space-vim/window/","title":"Window","tags":[],"description":"","content":"   Key Binding Mode Description     SPC b [1-9] Normal move cursor to the window with number [1-9]   SPC w j Normal move cursor to the window below current one   SPC w k Normal move cursor to the window above current one   SPC w h Normal move cursor to the window left of current one   SPC w l Normal move cursor to the windows right of current one   SPC w J Normal Increase current window height downwards   SPC w K Normal Increase current window height upwards   SPC w H Normal Increase current window height rightwards   SPC w L Normal Increase current window height leftwards   SPC w v Normal split window vertically   SPC w 2 Normal 2 columns, equal to SPC w v   SPC w s Normal split window horizontally   SPC w - Normal equal to SPC w -   SPC w d Normal delete the current window   SPC w q Normal quit the current window   SPC w w Normal choose window   SPC w r Normal rotate windows downwards/rightwards   SPC w m Normal maximize the window in GVim    "},{"uri":"https://liuchengxu.github.io/space-vim-doc/tutorial/space-vim/navigation/","title":"Navigation","tags":[],"description":"","content":"   Key Binding Mode Description     SPC j w Nomral jump to word   SPC j l Nomral jump to line   SPC j j Nomral search word via single char, equal to SPC SPC s   SPC j J Nomral search word via two chars   SPC SPC w Normal search word forward   SPC SPC b Normal search word backward   SPC SPC s Normal search char forward and backward   SPC SPC f Normal search char forward   SPC SPC j Normal line downward   SPC SPC k Normal line upward    "},{"uri":"https://liuchengxu.github.io/space-vim-doc/tutorial/space-vim/misc/","title":"Misc","tags":[],"description":"","content":"   Key Binding Mode Description     SPC b h Normal buffer home   SPC f f Normal find file under home directory   SPC f ? Normal file search   SPC f R Normal Reload .vimrc   SPC f r Normal file used recently   SPC f s Normal file save   SPC f t Normal file manager toggle   SPC x d Normal delete trailing whitespace    "},{"uri":"https://liuchengxu.github.io/space-vim-doc/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://liuchengxu.github.io/space-vim-doc/credits/","title":"Credits","tags":[],"description":"","content":"  ❤️ The modular design is originally from spacemacs\n  ❤️ space-vim borrows the implementation from vim-plug\n  ❤️ hugo-theme-learn for the documentation\n  ❤️ All the contributors of space-vim\n  "},{"uri":"https://liuchengxu.github.io/space-vim-doc/screenshots/","title":"Screenshots","tags":[],"description":"","content":"space-vim-dark onedark.vim "},{"uri":"https://liuchengxu.github.io/space-vim-doc/tutorial/space-vim/","title":"space-vim","tags":[],"description":"","content":"Most of key mappings are defined according to the mnemonic priciples from spacemacs.\nUsing :verbose to take a closer look at a defined key map, e.g., :verbose nmap \u0026lt;Leader\u0026gt;bh:\n:verbose nmap \u0026lt;Leader\u0026gt;bh n \u0026lt;Space\u0026gt;bh * :Startify\u0026lt;CR\u0026gt; Last set from ~/.space-vim/layers/+distributions/better-defaults/keybindings.vim  When \u0026lsquo;verbose\u0026rsquo; is non-zero, listing the value of a Vim option or a key map or an abbreviation or a user-defined function or a command or a highlight group or an autocommand will also display where it was last defined. If it was defined manually then there will be no \u0026ldquo;Last set\u0026rdquo; message. When it was defined while executing a function, user command or autocommand, the script in which it was defined is reported. See :h verbose-cmd.\n "},{"uri":"https://liuchengxu.github.io/space-vim-doc/tags/","title":"Tags","tags":[],"description":"","content":""}]