[{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/basics/","title":"基本篇","tags":[],"description":"","content":"基本篇 快速安装 space-vim，并了解 space-vim 的一些配置概念。\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/","title":"space-vim","tags":[],"description":"","content":"space-vim space-vim 的灵感来自于 spacemacs，并在键位绑定，UI，架构，配置上都与 spacemacs 相一致。因为我是一个 spacemacs 用户，创建 space-vim 之初也是为了不割裂 vim 和 emacs 的使用体验。如果你用过 spacemacs, 相信会有似曾相识之感。\nspace-vim 使用 .spacevim 进行个性化配置, 与 spacemacs 中的 .spacemacs 作用相同.\nContribute to this documentation 如果你对文档有任何意见或建议，点击每页右上方的 Edit this page 进行修改，并在 GitHub 上提 Pull Request.\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/tutorial/space-vim/","title":"space-vim","tags":[],"description":"","content":"了解缓冲区（buffer），窗口（window），文件（file）等基本操作。\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/tutorial/","title":"使用篇","tags":[],"description":"","content":"使用篇 除了介绍 space-vim 的基本使用，还会涉及一些 vim 的基础知识。\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/basics/requirements/","title":"安装准备","tags":[],"description":"","content":"引言 首先，肯定是先安装 Vim 或者 NeoVim。在这个环节需要注意的是，Vim 编译时是否包含了某个特性，比如 +python，因为很多插件使用了 Python 这样的扩展语言，而 NeoVim 安装时默认已包含全部特性。另外，由于 Vim8 才引入异步，时钟等特性，而这些会给用给用户体验带来很大的提升，因为有必要安装最新版本的 Vim。\n如下图，在终端中执行 vim --version，或者在 Vim 中执行 :version，即可看到所有细节。带 + 的就是已包含该特性，- 则是不包含，比如下面的 +python3 就是支持 Python3, -python 就是不支持 Python2。\n$ vim --version VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Oct 15 2017 09:28:05) MacOS X (unix) version Included patches: 1-1175 Compiled by Homebrew Huge version without GUI. Features included (+) or not (-): +acl +file_in_path +mouse_sgr +tag_old_static +arabic +find_in_path -mouse_sysmouse -tag_any_white +autocmd +float +mouse_urxvt -tcl -balloon_eval +folding +mouse_xterm +termguicolors -browse -footer +multi_byte +terminal ++builtin_terms +fork() +multi_lang +terminfo +byte_offset -gettext -mzscheme +termresponse +channel -hangul_input +netbeans_intg +textobjects +cindent +iconv +num64 +timers -clientserver +insert_expand +packages +title +clipboard +job +path_extra -toolbar +cmdline_compl +jumplist +perl +user_commands +cmdline_hist +keymap +persistent_undo +vertsplit +cmdline_info +lambda +postscript +virtualedit +comments +langmap +printer +visual +conceal +libcall +profile +visualextra +cryptv +linebreak -python +viminfo +cscope +lispindent +python3 +vreplace +cursorbind +listcmds +quickfix +wildignore +cursorshape +localmap +reltime +wildmenu +dialog_con +lua +rightleft +windows +diff +menu +ruby +writebackup +digraphs +mksession +scrollbind -X11 -dnd +modify_fname +signs -xfontset -ebcdic +mouse +smartindent -xim +emacs_tags -mouseshape +startuptime -xpm +eval +mouse_dec +statusline -xsmp +ex_extra -mouse_gpm -sun_workshop -xterm_clipboard +extra_search -mouse_jsbterm +syntax -xterm_save +farsi +mouse_netterm +tag_binary system vimrc file: \u0026#34;$VIM/vimrc\u0026#34; user vimrc file: \u0026#34;$HOME/.vimrc\u0026#34; 2nd user vimrc file: \u0026#34;~/.vim/vimrc\u0026#34; user exrc file: \u0026#34;$HOME/.exrc\u0026#34; defaults file: \u0026#34;$VIMRUNTIME/defaults.vim\u0026#34; fall-back for $VIM: \u0026#34;/usr/local/share/vim\u0026#34; Compilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DMACOS_X_UNIX -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 Linking: clang -L. -fstack-protector -L/usr/local/opt/libyaml/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/libksba/lib -L/usr/local/opt/openssl/lib -L/usr/local/lib -o vim -lm -lncurses -liconv -framework Cocoa -L/usr/local/lib -llua -fstack-protector -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE -lperl -L/Users/xlc/anaconda3/ lib/python3.5/config-3.5m -lpython3.5m -framework CoreFoundation -lruby.2.3.0 -lobjc -L/Users/xlc/.rvm/rubies/ruby-2.3.0/lib 安装 Neovim Installing Neovim\nVim   macOS\n$ brew install vim --with-override-system-vi --with-python3 --with-lua   Linux\nBuilding Vim from source\n  "},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/general/","title":"杂文","tags":[],"description":"","content":"Vim 通用知识。\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/tutorial/space-vim/buffer/","title":"缓冲区","tags":[],"description":"","content":"   Key Binding Mode Description 描述     SPC b 1 Normal switch to buffer with number 1 切换至 1 号缓冲区   SPC b 2 Normal switch to buffer with number 2 切换至 1 号缓冲区   SPC b 3 Normal switch to buffer with number 3 切换至 1 号缓冲区   SPC b 4 Normal switch to buffer with number 4 切换至 1 号缓冲区   SPC b 5 Normal switch to buffer with number 5 切换至 1 号缓冲区   SPC b 6 Normal switch to buffer with number 6 切换至 1 号缓冲区   SPC b 7 Normal switch to buffer with number 7 切换至 1 号缓冲区   SPC b 8 Normal switch to buffer with number 8 切换至 1 号缓冲区   SPC b 9 Normal switch to buffer with number 9 切换至 1 号缓冲区   SPC b p Normal switch to previous buffer 上一个缓冲区   SPC b n Normal switch to next buffer 下一个缓冲区   \u0026lt;Tab\u0026gt; Normal swtich to next buffer, equal to SPC b n 上一个缓冲区   \u0026lt;Shift-Tab\u0026gt; Normal switch to previous buffer, equal to SPC b p 下一个缓冲区   SPC b d Normal delete current buffer 删除当前缓冲区   SPC b k Normal kill current buffer 杀掉当前缓冲区    "},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/basics/installation/","title":"快速安装","tags":[],"description":"","content":"Linux and macOS 快速安装 $ bash \u0026lt;(curl -fsSL https://raw.githubusercontent.com/liuchengxu/space-vim/master/install.sh) Makefile $ git clone https://github.com/liuchengxu/space-vim.git ~/.space-vim $ cd ~/.space-vim $ make vim # install space-vim for Vim $ make neovim # install space-vim for NeoVim Windows   下载 git\n  下载 Vim\n  下载 vim-plug:\nwindows (PowerShell)\nmd ~\\.vim\\autoload $uri = \u0026#39;https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\u0026#39; (New-Object Net.WebClient).DownloadFile( $uri, $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath( \u0026#34;~\\.vim\\autoload\\plug.vim\u0026#34; ) )   进入用户目录，右键打开 Git Bash 选择 Git Bash Here.\n下载 space-vim 并建立软连接。\n$ git clone https://github.com/liuchengxu/space-vim.git ~/.space-vim $ ln -s ~/.space-vim/init.vim ~/.vimrc $ cp ~/.space-vim/init.spacevim ~/.spacevim   打开 Vim，执行 :PlugInstall.\n  "},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/general/tips/","title":"Vim 小知识点","tags":[],"description":"","content":":set 将会显示所有默认值被修改过的选项 (option):\n在一个选项后面加上 ? 来查看当前的选项值, 比如, :set undodir? .\n在一个选项后面加上 \u0026amp; 恢复其默认值, 比如, :set number? . 在使用 AsyncRun 时就曾经遇到过一个问题, #37 .\n:scriptenames, 按 source 的先后顺序列出所有 source 的文件, source 其实就是 load, 加载文件:\n:smile, 彩蛋:\n使用 或者 \u0026lt;Ctrl-c\u0026gt; 从 insert mode 回到 normal mode.\n:windo 对于所有的 window 执行一个操作, :bufdo 对所有的 buffer 执行一个操作.\nZZ (两个大写的 Z)等于 :wq, 保存并退出.\n:ls 列出所有的 buffer.\n:e . 或者 :Ex 打开内置的文件或目录浏览器.\n:only 关闭所有其他窗口而仅保留当前窗口.\n如果你的光标处是一个 url, 那么 gx 将会在默认浏览器中打开该 url.\n:h index, 查看所有模式下的默认键位. 更细致地, :h insert-index 可以查看插入模式 (insert mode) 下的默认键位, :h objects 查看文本对象的介绍等.\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/general/plugin-manager/","title":"Vim 插件管理器概览","tags":[],"description":"","content":"什么是 Vim 插件 见 :h plugin :\n Vim\u0026rsquo;s functionality can be extended by adding plugins. A plugin is nothing more than a Vim script file that is loaded automatically when Vim starts. You can add a plugin very easily by dropping it in your plugin directory.\n 一个 Vim 插件不过是 Vim 启动时自动加载的 Vim script 脚本而已. Vim 启动时会自动加载 runtimepath 中的 plugin 子目录下的所有文件. 那么, runtimepath 又是什么? :h runtimepath:\nruntimepath 就是 Vim 查找脚本文件的地方, runtimepath 之于 Vim ， 有点类似 $PATH 之于 shell. :echo \u0026amp;runtimepath 即可进行查看.\nruntimepath 下面有两个子目录需要注意:\n  plugin: plugin 目录下面的所有文件都会在启动时进行加载.\n  autoload: autoload 里面的文件, 在启动时并不会进行加载, 而是通过一种特殊的方式进行加载, 主要是命名上有要求, 详情见 :h autoload, 这里就不展开了. autoload 只不过是为了加速 Vim 的启动, 因为要将所有的内容放在 plugin 下面的话，可能会导致启动时间增加, 而且也没有必要, 因为很多内容并不常用, 无须在启动时加载. \u0026ldquo;坏处\u0026rdquo; 就是需要在命名上进行规范.\n  上图中还有一个 doc 目录, 它里面通常放的是插件的 help 内容.\n如果不用插件管理器, 手动管理 Vim Script 脚本文件也可以. 但是当插件一多的话, 就会变得很可怕, 更新, 删除都会很麻烦. 直到目前为止, Vim 并没有标准的插件管理器, 尽管 Vim 8 已经引入了 packages 的管理功能 (:h packages).\n主流插件管理器 主流的插件管理器有下面这几个, 从早期现在看来 \u0026ldquo;稍显简陋\u0026rdquo; 的 pathogen, 到 Vundle 已经是真正有了几分 manager 的意思, 再到现在比较流行的 vim-plug 和 dein.vim ( neobundle 是 dein 作者前一个插件管理器作品, 已经弃用了 ). vim-plug 和 dein.vim 现在都支持并行安装和延迟加载, 这对于有几十甚至上百个插件的人来说是非常重要的.\n我比较喜欢 vim-plug, space-vim 也是使用的 vim-plug, 因为它设计简单, 使用方便, 功能也都算完备.\n非主流插件管理器 除了主流的插件管理器, 还有很多非主流的管理器. 主流管理器都是用 Vim Script 实现的, 只是有些功能, 比如并行安装, 会有一些版本或是编译的特性 (+python等)要求, 使用上没有什么依赖. 而一些非主流管理器可能是用其他语言写的, 需要你事先安装了那个语言, 比如有用 Rust 和 Haskell 实现的.\n其实一个管理器的主要功能就是到 GitHub 上下载插件 (git clone) 然后放到指定目录, 这里 是 vim-plug 的作者对 vim-plug 诞生写的一篇文章, 里面介绍了 vim-plug 的由来.\n下面是一些非主流的 Vim 插件管理器, 有兴趣的可以自行查看:\n pack: Rust miv: Haskll vim-addon-manager minpac apt-vim vimogen  "},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/basics/configuration/","title":"定制配置","tags":[],"description":"","content":"核心理念 space-vim 的模块化设计取自于 spacemacs，其核心理念是 layer，可以点击这里查看 spacemacs 的 layer，点击这里查看 space-vim 的layer。其中，以 + 开头的目录我称之为 topic，其下层目录是该 topic 的一些 layer。LAYERS.md 是所有的 layer 清单。\nlayers ├── +lang │ ├── c-c++ │ ├── graphviz │ ├── html │ ├── markdown │ └── python ├── +themes │ ├── airline │ └── lightline ├── +tools │ ├── fzf │ └── ycmd ├── +version-control │ ├── git │ └── github ├── +vim │ ├── better-defaults │ ├── programming │ └── text-align └── LAYERS.md .spacevim 在 spacemacs 中，可以使用 .spacemacs 对 spacemacs 进行定制。与 spacemacs 相类似，space-vim 可以通过 .spacevim 来完成配置的个性化。.spacevim模板如下：\n\u0026#34; Let Vim and NeoVim shares the same plugin directory.\u0026#34; Comment it out if you don\u0026#39;t likelet g:spacevim_plug_home = \u0026#39;~/.vim/plugged\u0026#39;\u0026#34; Enable the existing layers in space-vimfunction! Layers()\u0026#34; Default layers Layer \u0026#39;fzf\u0026#39; Layer \u0026#39;unite\u0026#39; Layer \u0026#39;better-defaults\u0026#39;endfunction\u0026#34; Add your own pluginsfunction! UserInit()\u0026#34; The default leader key is space key.\u0026#34; Uncomment the line below and modify \u0026#34;\u0026lt;\\Space\u0026gt;\u0026#34; if you prefer another\u0026#34; let g:spacevim_leader = \u0026#34;\u0026lt;\\Space\u0026gt;\u0026#34;\u0026#34; The default local leader key is comma.\u0026#34; Uncomment the line below and modify \u0026#39;,\u0026#39; if you prefer another\u0026#34; let g:spacevim_localleader = \u0026#39;,\u0026#39;\u0026#34; Install personal plugins\u0026#34; Plug \u0026#39;hecal3/vim-leader-guide\u0026#39;endfunction\u0026#34; Override the default settings as well as adding extrasfunction! UserConfig()\u0026#34; If you have installed the powerline fonts and want to enable airline layer\u0026#34; let g:airline_powerline_fonts=1\u0026#34; Use gui colors in terminal if available if has(\u0026#39;termguicolors\u0026#39;) set termguicolors if g:spacevim_tmux\u0026#34; If use vim inside tmux, see https://github.com/vim/vim/issues/993\u0026#34; set Vim-specific sequences for RGB colors let \u0026amp;t_8f = \u0026#34;\\\u0026lt;Esc\u0026gt;[38;2;%lu;%lu;%lum\u0026#34; let \u0026amp;t_8b = \u0026#34;\\\u0026lt;Esc\u0026gt;[48;2;%lu;%lu;%lum\u0026#34; endif endifendfunction"},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/general/text-object-1/","title":"文本对象（1）","tags":[],"description":"","content":"本文还是介绍一些基本内容, 关于插件使用, 可以查看完整配置 space-vim.\n 如果想要在 Vim 里拥有高效编辑的能力, 必然要掌握超过单个字符编辑的能力, 不然就可能出现像之前看到过的一个笑话 :\n 在你刚开始使用 Vim 的时候做过什么令你 “难忘” 的事情? 答: 使用 j 跳转到 5000 行 :).\n 也就是说, 要掌握词 (word), 句子 (sentense), 段落 (paragraph) 级别的编辑能力. 在 Vim 里, 这样的概念叫做 文本对象 (text objects) . 详见 Vim 的 help :h text-objects. 另外, 这些概念对于只是对英文表现比较好, 因为英文可以按照空格划分词, 但是中文并不可以.\n本文的内容实际很多来自 Vim 的 help. 如果开始知道不懂的时候去查看 Vim 的 help, 基本上也就真正知道如何学习 Vim 了.\n对于普通文本文件和常见程序语言结构, Vim 都提供了文本对象. 你可以通过 Vim script 定义新的文本对象.\n一个编辑命令的结构 在 Vim 中, 编辑命令 (editing commands) 有着如下的结构:\n\u0026lt;number\u0026gt; \u0026lt;operator\u0026gt; \u0026lt;text object or motion\u0026gt;\u0026lt;数字\u0026gt; \u0026lt;操作符\u0026gt; \u0026lt;文本对象或移动命令\u0026gt;number: 数字用于在文本对象或移动操作上进行多次执行, 比如说, 向后 3 个单词, 向前 2 个段落. 数字是可选的, 可以出现命令(command) 的前面，也可以放在命令的后面.\n If the motion includes a count and the operator also had a count before it, the two counts are multiplied. For example: \u0026ldquo;2d3w\u0026rdquo; deletes six words.\n 如果是 motion 和下面所提到的 operator 都有数字修饰, 那么效果是两个数字相乘. 比如, 2d3w 是删除 6 个单词.\noperator: 操作符, 比如, change, delete (删除), yank (复制). 操作符也是可选的. 但是如果没有操作符的话, 那么就只剩一个移动命令, 而非一个编辑命令了.\n见 :h operator, Vim 默认提供的 operator 有:\ntext object 或者 motion 可以是一个文本对象, 比如, 一个单词, 一个句子, 一个段落, 或者是一个移动, 比如, 向下移动一行, 向后翻一页, 到一行末尾.\n:h text-objects : :h motion : 一个编辑命令(editing command) 等于一个操作符加上一个文本对象或者移动, 比如, 删除一个单词, 改变一个句子, 复制一个段落.\n an editing command = an operator + a text object/motion\n 普通文本对象 Vim 为普通文本文件提供了三种类型的文本对象: 词(word), 句子(sentence), 段落(paragraph).\n词  aw - a word (包含在周围的空格) iw - inner word (不包括周围的空格)  Lorem ipsum dolor sit amet... daw\nLorem dolor sit amet... 以 a 开头的文本对象包含周围的空格, 以 i 开头的文本对象不包含. 这个原则对所有的文本对象都适用.\nw 看起来与 aw 效果差不多. 区别在于光标位置. 比如, 如果用 dw 来删除一个词, 光标必须在词的开头. 如果在除了开头的其他位置使用 dw, 只能删除部分单词. 但是, daw 允许光标在一个词的任何位置删除整个单词.\n如果你已经懂得了 word 的 w 与 aw 的区别, 下面句子与段落就已经掌握了, 道理是一样的, 只是将 w 换成了 s 与 p.\n句子  as \u0026ndash; a sentence is \u0026ndash; inner sentence  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. cis\n Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 注意, \u0026ldquo;inner\u0026rdquo; 文本对象不包含尾部的空格.\n段落  ap \u0026ndash; a paragraph ip \u0026ndash; inner paragraph  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. dap\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 移动命令 vs. 文本对象命令  一个使用移动的命令, 比如, cw, 是从光标处开始生效. 一个使用文本对象的命令, 比如, ciw, 如果光标在何处, Vim 都将在整个文本对象上生效.  是一个移动命令还是一个文本对象命令, 区别在于是否有 a (around) 或者 i (inner) 这样的限制. 对于每个类型的文本对象都是如此. 尽管使用文本对象的方式需要多输入一个字符, 但是这可以节省你的时间将光标移动到 \u0026ldquo;正确\u0026rdquo; 的位置.\n参考: [1] Vim Text Objects: The Definitive Guide\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/general/text-object-2/","title":"文本对象（2）","tags":[],"description":"","content":"接 Vim 文本对象 (1), 关于插件使用, 可以查看完整配置 space-vim.\n 编程语言的文本对象 Vim 基于常见编程语言结构提供了几个常见的文本对象. 其实都是一对儿符号，主要可以分为:\n 成对的标点符号，比如单引号，双引号，反引号。 成对的括号，比如小括号，中括号，大括号。 标记语言标签，它们也是成对的，比如 HTML 的标签，\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;。  模式为 操作 + a/i + 符号，这样操作的就是文本对象。不加 a 或者 i 的话就不是一个对文本对象的操作了。对文本对象进行操作时，Vim 不会考虑你的光标位置。而非文本对象操作时，会从当前光标处开始生效。\n举个例子， ci\u0026quot; 指的是 change inner \u0026quot;, 改变 \u0026quot;\u0026quot;所包含的内容，也就是删除 \u0026quot;\u0026quot; 里面的内容并进入插入模式。\n使用 a (around) 时，操作的范围包括标点符号，括号，标签本身。使用 i (inner) 时，不包括符号，括号，标签等。动手试一下，很快就能学会了。\n字符串 (string)  a” – a double quoted string i” – inner double quoted string a’ – a single quoted string i’ – inner single quoted string a` – a back quoted string i` – inner back quoted string  puts 'Hello \u0026quot;world\u0026quot;' ci\u0026quot;\nputs 'Hello \u0026quot;\u0026quot;' 圆括号 对于各种括号, 操作时使用前括号或后括号都可以, 比如 da( 等同于 da).\n a) – a parenthesized block i) – inner parenthesized block  Project.all(:conditions =\u0026gt; { :published =\u0026gt; true }) da)\nProject.all 方括号  a] – a bracketed block i] – inner bracketed block  (defn sum [x y] (+ x y)) di]\n(defn sum [] (+ x y)) 大括号  a} – a brace block i} – inner brace block  puts \u0026quot;Name: #{user.name}\u0026quot; ci}\nputs \u0026quot;Name: #{}\u0026quot; 这些文本对象同样可以通过 aB 和 iB 来操作, 但是并不如使用 a} 和 i} 来的直观.\n% 同样适用于 {}. 但是也有着 () 和 [] 一样的限制性.\n标记语言标签 标记语言标签分为两类: t 和 \u0026gt;, t 所操作的是标签内包含的内容, 比如 \u0026lt;p\u0026gt;content\u0026lt;/p\u0026gt;，\u0026lt;p\u0026gt; 与 \u0026lt;/p\u0026gt; 之间包含的内容就是 t 来操作. \u0026lt; 或 \u0026gt; 的内容指的是 \u0026lt;p\u0026gt; 里面的 p. 具体可以看下面的例子。\n at – a tag block it – inner tag block  \u0026lt;h2\u0026gt;Sample Title\u0026lt;/h2\u0026gt; cit\n\u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt; 因为操作后光标并不在 \u0026lt;h2\u0026gt; 里面, 所以 cit 替换标记里面的内容是非常方便的.\n a\u0026gt; – a single tag i\u0026gt; – inner single tag  \u0026lt;div id=\u0026quot;content\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; di\u0026gt;\n\u0026lt;\u0026gt;\u0026lt;/div\u0026gt; 这个文本对象也可以被用来快速操作单个标记及其属性.\n参考: [1] Vim Text Objects: The Definitive Guide\n"},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/tutorial/space-vim/window/","title":"窗口","tags":[],"description":"","content":"   Key Binding Mode Description     SPC w j Normal 移动至下方窗口   SPC w k Normal 移动至上方窗口   SPC w h Normal 移动至左侧窗口   SPC w l Normal 移动至右侧窗口   SPC w J Normal 向下扩大当前窗口   SPC w K Normal 向上扩大当前窗口   SPC w H Normal 向右扩大当前窗口   SPC w L Normal 向左扩大当前窗口   SPC w v Normal 竖直分割窗口   SPC w 2 Normal 将窗口分割为两列，等同于 SPC w v   SPC w s Normal 水平分割窗口， 等同于 SPC w -   SPC w d Normal 关闭 (delete) 当前窗口   SPC w q Normal 退出 (quit) 当前窗口，若是最后一个窗口则退出 Vim   SPC w w Normal 在所有窗口中循环移动   SPC w r Normal 向右或向下方交换 (replace) 窗口   SPC w m Normal GUI 环境下 vim 窗口最大化 (maximize) 开关    "},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/tutorial/space-vim/navigation/","title":"导航","tags":[],"description":"","content":"   Key Binding Mode Description     SPC j w Nomral 单词跳转 (jump to word)   SPC j l Nomral 行间跳转 (jump to line)   SPC j j Nomral goto-char, 单个字符搜索, 等同于 SPC SPC s   SPC j J Nomral goto-char-2, 两个字符搜索   SPC SPC w Normal 快速词间移动(向前)   SPC SPC b Normal 快速词间移动 (向后)   SPC SPC s Normal 快速字符搜索 (双向)   SPC SPC f Normal 快速字符搜索 (向前)   SPC SPC j Normal 快速行间移动 (向下)   SPC SPC k Normal 快速行间移动 (向上)    "},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/tutorial/space-vim/misc/","title":"其他","tags":[],"description":"","content":"   Key Binding Mode Description     SPC b h Normal buffer home, 主 buffer   SPC f f Normal file search, 使用 fzf 搜索当前用户目录下的文件 (terminal vim)   SPC f ? Normal file search, 使用 fzf 搜索当前工作目录下的文件 (terminal vim)   SPC f R Normal reload .vimrc, 重新加载 .vimrc (file R esource)   SPC f r Normal file used recently, 最近使用的文件   SPC f t Normal file toggle, NERDTree toggle, 打开 NERDTree   SPC x d Normal delete trailing whitespace, 去掉行尾多余空格 (text delete)    "},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/credits/","title":"Credits","tags":[],"description":"","content":"  ❤️ layer 的模块化设计源自于 spacemacs\n  ❤️ 实现上参考了 vim-plug\n  ❤️ hugo-theme-learn\n  ❤️ All the contributors of space-vim\n  "},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/screenshots/","title":"Screenshots","tags":[],"description":"","content":"space-vim-dark onedark.vim "},{"uri":"https://liuchengxu.github.io/space-vim-doc/zh/tags/","title":"Tags","tags":[],"description":"","content":""}]